{"version":3,"sources":["Table.js","Form.js","App.js","index.js"],"names":["TableHeader","react_default","a","createElement","TableBody","props","rows","characterData","map","row","index","console","log","name","job","key","onClick","removeRow","Table","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_this$props","Table_TableHeader","Table_TableBody","Component","Form","handleChange","event","_event$target","target","value","setState","defineProperty","submitForm","handleSubmit","initialState","_this$state","type","onChange","App","characters","filter","row_object","i","handleFormSubmit","character","concat","toConsumableArray","className","src_Table","src_Form","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.bdc5c292.chunk.js","sourcesContent":["// Custom class component - Table using simple sub-components.\nimport React, { Component } from 'react'\n\n/*\n// Samples SimpleComponent vs. ClassComponent\nconst SimpleComponent = () => {\n  return <div>Example</div>\n}\n\nclass ClassComponent extends Component {\n  render() {\n    return <div>Example</div>\n  }\n}\n\n// Note that if the return is contained the one line only, it does not need parentheses.\n// A class component must include render(), and the return statement can only return ONE parent element:\n*/\n\n// Simple components:\nconst TableHeader = () => {\n  return (\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Job</th>\n      </tr>\n    </thead>\n  )\n}\n\nconst TableBody = props => {\n  const rows = props.characterData.map((row, index) => {\n    console.log('TableBody index, row.name, row.job')\n    console.log(index, row.name, row.job)\n\n    // key={index} must be used for unique row identification.\n    return (\n      <tr key={index}>\n        <td>{row.name}</td>\n        <td>{row.job}</td>\n        <td>\n          <button onClick={() => props.removeRow(index)}>Delete row</button>\n        </td>\n      </tr>    \n    )\n  })\n\n  return <tbody>{rows}</tbody>\n}\n\n// Class component that uses simple (sub-)components.\n// A class component must include render(), and the return can only return ONE parent element:\n\nclass Table extends Component {\n  // We'll need the constructor() to use `this`, and to receive the props of the parent.\n  constructor(props) {\n    super(props)\n    console.log('Table constructor props')\n    console.log(props)\n\n    console.log('Table constructor this.state')\n    console.log(this.state)\n  }\n  // A class component must include render(), and the return statement can only return ONE parent element:\n  render() {\n    const { characterData, removeRow } = this.props\n\n    return (\n      <table>\n        <TableHeader />\n        <TableBody characterData={characterData} removeRow={removeRow} />\n      </table>\n    )\n  }\n}\n\n/*\nclass Table extends Component {\n  render() {\n    const { characterData } = this.props\n    console.log(characterData)\n\n    return (\n      <table>\n        <TableHeader />\n        <TableBody characterData={characterData} />\n      </table>\n    )\n  }\n}\n*/\n\n/* Initial:\n\nconst TableBody = () => {\n  return (\n    <tbody>\n      <tr>\n        <td>Charlie</td>\n        <td>Janitor</td>\n      </tr>\n      <tr>\n        <td>MacMillian</td>\n        <td>Bouncer</td>\n      </tr>\n      <tr>\n        <td>Dee</td>\n        <td>Aspiring actress</td>\n      </tr>\n      <tr>\n        <td>Dennis</td>\n        <td>Bartender</td>\n      </tr>\n    </tbody>\n  )\n}\n\nclass Table extends Component {\n  render() {\n    return (\n      <table>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Job</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>Charlie</td>\n            <td>Janitor</td>\n          </tr>\n          <tr>\n            <td>Mac</td>\n            <td>Bouncer</td>\n          </tr>\n          <tr>\n            <td>Dee</td>\n            <td>Aspiring actress</td>\n          </tr>\n          <tr>\n            <td>Dennis</td>\n            <td>Bartender</td>\n          </tr>\n        </tbody>\n      </table>\n    )\n  }\n}\n*/\n\nexport default Table","'use strict' // use strict is unnecessary inside of modules.\nimport React, { Component } from 'react'\n\nclass Form extends Component {\n  // We'll need the constructor() to use `this`, and to receive the props of the parent.\n  constructor(props) {\n    super(props)\n    console.log('Form constructor props')\n    console.log(props)\n\n    this.initialState = {\n      name: '',\n      job: '',\n    }\n\n    console.log('Form constructor this.initialState')\n    console.log(this.initialState)\n    console.log('Form constructor this.state before setting from this.initialState')\n    console.log(this.state)\n    this.state = this.initialState // set Form this.state directly without re-rendering.\n    console.log('Form constructor this.state after setting from this.initialState')\n    console.log(this.state)\n  }\n\n  handleChange = event => {\n    const { name, value } = event.target\n    console.log('Form handeChange event event.target')\n    console.log(event.target)\n    \n    console.log('Form handeChange event this.state before setting event {name: value}')\n    console.log(this.state)\n    this.setState({ // set Form this.state asyn and trigger re-rendering with childs.\n      [name]: value,\n    })\n    console.log('Form handeChange event this.state after asyn setting event {name: value}')\n    console.log(this.state)\n    //console.log('Form handeChange event this.initialState')\n    //console.log(this.initialState)\n  }\n\n  submitForm = () => {\n    console.log('Form submitForm event this.state before calling handleSubmit')\n    console.log(this.state)\n    this.props.handleSubmit(this.state) // call App handleFormSubmit() with Form this.state.\n    console.log('Form submitForm event this.state after calling handleSubmit')\n    console.log(this.state)\n    this.setState(this.initialState) // asyn set Form this.state to initial and trigger re-rendering with childs.\n    console.log('Form submitForm event this.state after asyn reset to this.initalState')\n    console.log(this.state)\n    //console.log('Form submitForm event this.initialState')\n    //console.log(this.initialState)\n  }\n  // A class component must include render(), and the return statement can only return ONE parent element:\n  render() {\n    const { name, job } = this.state;\n    // Render or re-render Form form.\n    // Using an onClick instead of onSubmit since we're not using the standard submit functionality.\n    return (\n      <form>\n        <label>Name</label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={this.handleChange} />\n        <label>Job</label>\n        <input\n          type=\"text\"\n          name=\"job\"\n          value={job}\n          onChange={this.handleChange} />\n        <input type=\"button\" value=\"Submit\" onClick={this.submitForm} />\n      </form>\n    );\n  }\n}\n\nexport default Form","// Traditional very first custom class component - App\n// (capitalize custom components to differentiate them from regular HTML elements).\nimport React, { Component } from 'react'\nimport Table from './Table'\nimport Form from './Form'\n\n  /*\n  state = { characters: [\n    {\n      name: 'Charlie',\n      job: 'Janitor',\n    },\n    {\n      name: 'MacDuck2',\n      job: 'Bouncer',\n    },\n    {\n      name: 'Dee',\n      job: 'Aspring actress',\n    },\n    {\n      name: 'Dennis',\n      job: 'Bartender',\n    },\n  ]}\n  */\n class App extends Component {\n  // No constructor(props) initially class declaration used\n  /*\n  state = {characters: [\n    {\n      name: 'Dee',\n      job: 'Aspring actress',\n    },\n  ]}\n  */\n\n  // We'll need the constructor() to use `this`, and to receive the props of the parent.\n  constructor(props) {\n    super(props)\n    console.log('App constructor props')\n    console.log(props)\n\n    console.log('App constructor this.state before')\n    console.log(this.state)\n    this.state = {characters: [\n      {\n        name: 'Dee',\n        job: 'Aspring actress',\n      },\n    ]}\n    console.log('App constructor this.state after')\n    console.log(this.state)\n  }\n\n  removeRow = index => {\n    const { characters } = this.state\n  \n    console.log('App removeRow this.state before')\n    console.log(this.state)\n    this.setState({ // set App this.state and trigger re-rendering with childs.\n      characters: characters.filter((row_object, i) => {\n        return i !== index\n      }),\n    })\n    console.log('App removeRow this.state after asyn row delete')\n    console.log(this.state)\n  }  \n\n  // Below character actuallly is objet {name: value}\n  handleFormSubmit = character => {\n    console.log('App handleFormSubmit event object character before asyn setState')\n    console.log(character)\n    console.log('App handleFormSubmit event this.state before asyn setState')\n    console.log(this.state)\n     // asyn set App this.state and trigger re-rendering with childs.\n    this.setState({ characters: [...this.state.characters, character] })\n    console.log('App handleFormSubmit event this.state after asyn setState')\n    console.log(this.state)\n  }\n  // A class component must include render(), and the return statement can only return ONE parent element:\n  render() {\n    //const { characters } = this.state\n    // Render of re-render with Table and Form childs.\n    return (\n      <div className=\"container\">\n        {/*<Table characterData={this.state.characters} />*/}\n        {/*<Table characterData={this.state.characters} removeRow={this.removeRow} />*/}\n        <Table characterData={this.state.characters} removeRow={this.removeRow} />\n        <Form handleSubmit={this.handleFormSubmit} />\n      </div>\n    )\n  }\n}\n\n/*\nclass App extends Component {\n  render() {\n    const characters = [\n      {\n        name: 'Charlie',\n        job: 'Janitor',\n      },\n      {\n        name: 'MacDuck',\n        job: 'Bouncer',\n      },\n      {\n        name: 'Dee',\n        job: 'Aspring actress',\n      },\n      {\n        name: 'Dennis',\n        job: 'Bartender',\n      },\n    ]\n\n    return (\n      <div className=\"container\">\n        <Table characterData={characters} />\n      </div>\n    )\n  }\n}\n*/\n//class App extends Component {\n//  render() {\n//    return (\n      /*\n      <div className=\"App\">\n        <h1>Hello, React from App.js file with export default App!</h1>\n      </div>\n      */\n//      <div className=\"container\">\n//        <Table />\n//      </div>\n//    )\n//  }\n//}\n\n\nexport default App","//import React, { Component } from 'react'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n//import App from './Api'\n/*\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Hello, React!</h1>\n      </div>\n    )\n  }\n}\n*/\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}